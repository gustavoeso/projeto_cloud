Resources:
  # # Definição do grupo de segurança que especifica as regras de tráfego permitidas para as instâncias EC2
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Grupo de Seguranca para acesso a aplicacao"
      VpcId: !Ref gustavoVPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Abre a porta 80 para todo o tráfego (HTTP)
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Abre a porta 22 para todo o tráfego (SSH)
      Tags:
        - Key: Name
          Value: SecurityGroup
  
  # Configuração da VPC onde todos os recursos da rede serão implantados
  gustavoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: gustavoVPC

  # Definição das subnets públicas dentro da VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref gustavoVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref gustavoVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # Configuração da IAM Role para permitir que as instâncias EC2 acessem recursos específicos no S3 e DynamoDB
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "AccessS3BucketAndDynamoDB"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource: "arn:aws:s3:::bucket-projeto-gustavo/*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource: "arn:aws:dynamodb:us-east-1:116979769772:table/Users"

  # Instance Profile que associa a IAM Role às instâncias EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3AccessRole

  # Launch Configuration: Define uma configuração de lançamento que especifica uma AMI e configurações de instância, incluindo a instalação de software via UserData.
  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-07caf09b362be10b8
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      # userData para colocar a aplicação nas instancias
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Instalar Python e pip
          sudo yum install -y python3-pip python3
          #instalar o flask
          sudo pip3 install flask
          # Instalar AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          # Instalar AWS SDK para Python (Boto3)
          sudo pip3 install boto3
          # Criar diretório para a aplicação
          mkdir -p /opt/app
          cd /opt/app
          # Baixar a aplicação do S3
          aws s3 cp s3://bucket-projeto-gustavo/aplicacao.py /opt/app/aplicacao.py
          # Executar a aplicação (ajustar conforme necessário)
          python3 /opt/app/aplicacao.py

  # Auto Scaling Group (ASG): Configura um grupo de auto scaling que utiliza o Launch Configuration para escalar automaticamente as instâncias.
  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: '3'
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      # Integração do ASG com o ALB através do Target Group: ASG está vinculado ao ALB através de um Target Group especificado.
      TargetGroupARNs:
        - !Ref AppTargetGroup
      MetricsCollection:
        - Granularity: "1Minute"
  
  # Alarmes de CloudWatch para monitorar e responder a condições específicas, como alta utilização de CPU (no caso 70%)
  CPUUtilizationAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarme quando a CPU excede 70%"
      Namespace: "AWS/EC2"
      MetricName: "CPUUtilization"
      Dimensions:
        - Name: "AutoScalingGroupName"
          Value: !Ref AppAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleOutPolicy
      OKActions:
        - !Ref ScaleInPolicy

  # Políticas de escalabilidade para aumentar ou diminuir o número de instâncias automaticamente
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 300

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  # Application Load Balancer, Target Group, and Listener
  # Provisionar um ALB: ALB configurado para distribuir o tráfego entre instâncias EC2.
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
  # Configurar Target Groups: Definição de Target Group para gerenciar as instâncias EC2 com configurações de Health Check.
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref gustavoVPC
      Protocol: HTTP # Define o protocolo usado pelo Target Group
      Port: 80 
      # Health Checks: Implementados no Target Group para garantir que o tráfego seja direcionado apenas para instâncias saudáveis.
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30 # Intervalo entre os health checks
      HealthCheckTimeoutSeconds: 5  # Tempo máximo de espera por uma resposta de health check
      HealthyThresholdCount: 3 # Número de verificações sucessivas para considerar a instância saudável
      UnhealthyThresholdCount: 3 # Número de verificações falhas para considerar a instância não saudável
  # Listener para o ALB, que direciona o tráfego recebido para o Target Group
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  # Criação do Internet Gateway para permitir comunicação entre a VPC e a internet
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Anexação do Internet Gateway à VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref gustavoVPC
      InternetGatewayId: !Ref InternetGateway

  # Tabela de rotas para a VPC que define como o tráfego é direcionado
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref gustavoVPC

  # Tabela de rotas para a VPC que define como o tráfego é direcionado
  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0 # Define que a rota aplica-se a todo o tráfego
      GatewayId: !Ref InternetGateway

  # Associações entre as subnets públicas e a tabela de rotas para garantir que possam acessar a internet
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1 # Subnet a ser associada
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  # Provisionar uma instância DynamoDB: Tabela DynamoDB configurada dentro da VPC.
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Users" # Nome da Tabela
      AttributeDefinitions:
        - AttributeName: "UserID" # Definicao do atributo da chave primaria
          AttributeType: "S" # Tipo String
      KeySchema:
        - AttributeName: "UserID" # Tipo da chave primaria como hash
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5 # Unidades de capacidade de leitura
        WriteCapacityUnits: 5 # Unidades de capacidade de escrita
      Tags:
        - Key: "Name"
          Value: "Users"
  
  # Endpoint VPC para DynamoDB para permitir acesso direto e privado à tabela de dentro da VPC sem necessidade de acesso a internet
  DynamoDBVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref gustavoVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: "Interface"
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      PrivateDnsEnabled: false
      SecurityGroupIds:
        - !Ref SecurityGroup
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "dynamodb:*"
            Resource: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users"

# Output para conseguir pegar o DNS do ALB sem ter que entrar no dashboard
Outputs:
  LoadBalancerDNS:
    Description: "DNS Name of the Application Load Balancer"
    Value: !GetAtt AppLoadBalancer.DNSName
    Export:
      Name: "LoadBalancerDNSName"
